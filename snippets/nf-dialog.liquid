{% assign recent_purchased_items = customer.metafields.custom.order_json.value %}
{% assign wishlist_product_list = customer.metafields.fields_raven.wishlist_product_list.value | reverse %}

{% comment %} <script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script> {% endcomment %}
<script type="text/javascript">
  window.wishlistProductListObj = {{ wishlist_product_list | json | default: '[]' }};
  window.productIds = [];
  var recentPurchasedItemsJson = null;
  const GRID_LOADED_CLASS = 'loaded';
  var newRecentPurchasedItemsJson = [];
  const recentOrdersSelectors = {
    grid: '[grid-recent-orders]',
    grid_viewAll: '[grid-recent-orders-all]',
    productCard: '.recent_order_row_wrapper'
  };

  const fetchRecentOrder = async () => {
    await window.refreshTokenIfNeeded();
    const { urlProxy, authToken } = window.customerOrdersApp;
    const headers = new Headers({
      'Authorization': `Bearer ${authToken}`
    });
    const fetchOptions = {
      method: 'GET',
      headers,
      redirect: 'follow'
    };
    try {
      const ordersResponse = await fetch(
        `${urlProxy}api/v1/customer/orders?items=1&sort=desc`,
        fetchOptions
      );
      const orders = await ordersResponse.json();
      const orderId = orders?.data[0]?.id;
      if (orderId) {
        const orderLineItemsResponse = await fetch(
          `${urlProxy}api/v1/order/line-items?order_id=${orderId}`,
          fetchOptions
        );
        const orderLineItems = await orderLineItemsResponse.json();
        const lineItems = orderLineItems?.data;
        if (Array.isArray(lineItems)) {
          recentPurchasedItemsJson = lineItems.map(({ product, quantity }) => ({
            id: product?.id,
            handle: product?.handle,
            quantity
          }));
        }
      }
    } catch (error) {
      console.error(error);
    }
  };

  function initTabs() {
    const tabLinks = document.querySelectorAll('.nf-tab-links li');
    const tabContent = document.querySelectorAll('.nf-tab-content .tab');
    tabLinks.forEach((tabLink, i) => {
      tabLink.addEventListener('click', function (e) {
        e.preventDefault();
        const target = this.querySelector('a').getAttribute('href');

        tabContent.forEach(content => content.classList.remove('active'));
        tabLinks.forEach(link => link.classList.remove('active'));

        this.classList.add('active');
        document.querySelector(target).classList.add('active');
      });
    });
  }

  const initDialog = () => {
    const dialog = document.querySelector('dialog');
    const closeDialogButton = document.querySelector('.nf-close-dialog');

    closeDialogButton.onclick = function () {
      dialog.classList.add('hide');
      dialog.addEventListener('webkitAnimationEnd', function () {
        dialog.classList.remove('hide');
        dialog.close();
        dialog.removeEventListener('webkitAnimationEnd', arguments.callee, false);
      }, false);
    };
  }

  const quantitySpinnerElem = (quantitySpinners, minusButton, plusButton, quantityInputField, atcButton) => {
    quantitySpinners.forEach((quantitySpinner) => {
      const minusBtn = quantitySpinner.querySelector(minusButton);
      const plusBtn = quantitySpinner.querySelector(plusButton);
      const quantityInput = quantitySpinner.querySelector(quantityInputField);
      if (quantityInput.value == 0) {
        minusBtn.classList.add('disabled');
      } else {
        minusBtn.classList.remove('disabled');
      }
      const spinners = document.querySelectorAll(quantityInputField);
      minusBtn.addEventListener('click', () => {
        if (quantityInput.value > 0) {
          quantityInput.value = parseInt(quantityInput.value) - 1;
        }
        if (spinners.length == 1) {
          if (quantityInput.value == 0) {
            document.querySelector(atcButton).classList.add('disabled');
            minusBtn.classList.add('disabled');
          } else {
            document.querySelector(atcButton).classList.remove('disabled');
          }
        } else {
          const allZero = Array.from(spinners).every((spinner) => spinner.value === '0');
          if (allZero) {
            document.querySelector(atcButton).classList.add('disabled');
          } else {
            document.querySelector(atcButton).classList.remove('disabled');
          }
        }
      });
      plusBtn.addEventListener('click', () => {
        quantityInput.value = parseInt(quantityInput.value) + 1;
        document.querySelector(atcButton).classList.remove('disabled');
        minusBtn.classList.remove('disabled');
      });
    });
  }

  const accountNotif = () => {
    var x = document.getElementById('account-drawer-notif');
    x.className = 'show';
    setTimeout(function () {
      x.className = x.className.replace('show', '');
    }, 3000);
  }
  const accountErrorNotif = () => {
    var x = document.getElementById('account-drawer-notif-error');
    x.className = 'show';
    setTimeout(function () {
      x.className = x.className.replace('show', '');
    }, 3000);
  }

  const addToCart = (data, classElem) => {
    fetch('/cart/add.js', {
      body: JSON.stringify(data),
      credentials: 'same-origin',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'xmlhttprequest'
      },
      method: 'POST'
    }).then((response) => {
      return response.json();
      setTimeout(() => {
        classElem.cartNotification = document.querySelector('cart-notification');
        classElem.cartNotification.renderContents(response);
        classElem.innerHTML = `${window.String.reOrderSelectedItems}`;
      }, 5000);

    }).then((json) => {
      newWishlistData = [];
      accountNotif();
      setTimeout(() => {
        classElem.innerHTML = `Voeg toe aan winkelwagen.`;
        classElem.classList.remove('loading');
        classElem.classList.add('loaded');
      }, 1000);
    }).catch((err) => {
      console.error(err)
    });
  }
  const productCardHTML = (handle) => {
    let locale_code = '{{ request.locale.iso_code }}';
    if (locale_code == 'nl') {
      locale_code = "";
    } else {
      locale_code = locale_code
    }
    const productTileTemplateUrl = `${locale_code}/products/${handle}?view=recent_purchase`;
    return fetch(productTileTemplateUrl)
      .then((res) => res.text())
      .then((res) => {
        const text = res;
        const parser = new DOMParser();
        const htmlDocument = parser.parseFromString(text, 'text/html');
        const productCard = htmlDocument.documentElement.querySelector(recentOrdersSelectors.productCard);
        return productCard.outerHTML;
      })
      .catch((err) => console.error(`[Shopify Recent Order] Failed to load content for handle: ${handle}`, err));
  };

  const recentOrderSetupGrid = async (grid) => {
    if (recentPurchasedItemsJson == null) {
      grid.innerHTML = '0 orders';
      grid.classList.add(GRID_LOADED_CLASS);
    } else {
      const recent_order = getRecentOrder();
      const get_quantity = getRecentOrderID();
      const requests = recent_order.map(productCardHTML);
      const responses = await Promise.all(requests);
      const recentOrderProductCards = responses.join('');
      grid.innerHTML = recentOrderProductCards;
      document.querySelectorAll('.recent-details').forEach(function (details) {
        details.addEventListener('toggle', function () {
          var targetId = this.getAttribute('data-target');
          var targetContent = document.getElementById(`recent-list-${targetId}`);
          if (this.open) {
            targetContent.style.display = 'block';
          } else {
            targetContent.style.display = 'none';
          }
        });
      });
      const recentQuantitySpinners = document.querySelectorAll(".recent-quantity-spinner");
      let recentListCartData = [];
      let newRecentListData = [];
      get_quantity.forEach(item => {
        const orderCount = document.querySelectorAll(`#purchase-count-${item.id}`);
        const recentOrderWrapper = document.querySelectorAll(`#recent-order-wrapper-${item.id}`);
        orderCount.forEach(order => {
          order.innerHTML = `{{ 'customer.account.times_ordered' | t }}` + item.quantity + `x`;
        });
        recentOrderWrapper.forEach(recent => {
          recent.setAttribute('data-quantity', item.quantity);
        });
      });

      const container = document.getElementById("recent_tab");
      const items = Array.from(container.querySelectorAll(".recent_order_row_item"));
      items.sort((a, b) => {
        const quantityA = parseFloat(a.getAttribute("data-quantity"));
        const quantityB = parseFloat(b.getAttribute("data-quantity"));
        return quantityB - quantityA;
      });
      items.forEach(item => container.appendChild(item));
      quantitySpinnerElem(recentQuantitySpinners, ".minus__button", ".plus__button", ".recentQuantity-input", ".recent-re-order-btn");

      document.querySelector('.recent-re-order-btn').addEventListener('click', function (event) {
        this.classList.add('loading');
        this.innerHTML = `<div class="loading-overlay__spinner">
          <svg
            aria-hidden="true"
            focusable="false"
            role="presentation"
            class="spinner"
            viewBox="0 0 66 66"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
          </svg>
        </div>`;
        recentQuantitySpinners.forEach(recentQuantitySpinner => {
          const quantityInput = recentQuantitySpinner.querySelector(".recentQuantity-input");
          let closestVariantElement = recentQuantitySpinner.closest("[data-variant]");
          let item = "";
          item = closestVariantElement.dataset.variant;
          let quantityValue = quantityInput.value;
          recentListCartData.push({
            id: item,
            quantity: quantityValue
          });
        });
        const reducedRecentListCartData = recentListCartData;
        let result = reducedRecentListCartData.reduce((acc, curr) => {
          let item = acc.find(item => item.id === curr.id);
          if (item) {
            item.quantity = curr.quantity;
          } else {
            acc.push(curr);
            newRecentListData.push(curr);
          }
          return acc;
        }, []);
        newRecentListData = newRecentListData.filter(item => item.quantity > 0);
        var data = {
          items: newRecentListData
        }
        addToCart(data, this);
      });

      grid.classList.add(GRID_LOADED_CLASS);

      const event = new CustomEvent('shopify-recent-order:init-product-grid', {
        detail: { recent_order: recent_order }
      });
      document.dispatchEvent(event);
    }
  };

  const recentOrderInitGrid = () => {
    const grid = document.querySelector(recentOrdersSelectors.grid) || false;
    const grid_viewAll = document.querySelector(recentOrdersSelectors.grid_viewAll) || false;
    if (grid) recentOrderSetupGrid(grid);
    if (grid_viewAll) recentOrderSetupGrid(grid_viewAll);
  };

  const getRecentOrder = () => {
    if (recentPurchasedItemsJson != null) {
      const recentOrders = recentPurchasedItemsJson;
      let newRecentOrders = [];
      let getHandle = [];
      let result = recentOrders.reduce((acc, curr) => {
        let item = acc.find(item => item.id === curr.id);
        if (item) {
          item.quantity += curr.quantity;
        } else {
          acc.push(curr);
          newRecentOrders.push(curr);
        }
        return acc;
      }, []);
      result.forEach(item => {
        getHandle.push(item.handle);
      });
      if (result) return getHandle;
      return [];
    }
  };

  const getRecentOrderID = () => {
    const recentOrders = recentPurchasedItemsJson;
    if (recentOrders != null) {
      let result = recentOrders.reduce((acc, curr) => {
        let item = acc.find(item => item.id === curr.id);
        if (item) {
          item.quantity += curr.quantity - 1;
        } else {
          acc.push(curr);
        }
        return acc;
      }, []);
      if (result) return result;
      return [];
    }
  };

  const nf_view_all_recent_orders = `{% render 'nf-view-recent-orders' %}`;
  const nf_view_all_wishlist = `{% render 'nf-view-wishlist' %}`;
  var recent_ordered_wrapper = document.querySelectorAll('.re_order_cta_btn');
  for (var i = 0; i < recent_ordered_wrapper.length; i++) {
    recent_ordered_wrapper[i].addEventListener('click', function (event) {
      var variantID = parseInt(this.dataset.upsellId);
      if (this.dataset.isAdded == 'false') {
        this.dataset.isAdded = true;
        addRecentlyProduct(this, variantID);
      } else {
        this.dataset.isAdded = false;
        removeRecentlyProduct(this, variantID);
      }
    });
  }

  function addRecentlyProduct(target, variantID) {
    target.querySelector('.icon-cart-v2').classList.add('hidden');
    target.querySelector('.loading-overlay__spinner').classList.remove('hidden');
    let formData = {
      'items': [{
        'id': variantID,
        'quantity': 1,
        'properties': { '': '' }
      }]
    };

    addToCart(formData, this);
  }

  function removeRecentlyProduct(target, variantID) {
    target.querySelector('.loading-overlay__spinner').classList.remove('hidden');
    target.querySelector('.upsell-is-checked').classList.add('hidden');
    let formData = {
      'updates': {
        [variantID]: 0
      }
    };

    fetch('/cart/update.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(formData)
    })
      .then(function (response) {
        return response.json();
      })
      .then(function (data) {
        setTimeout(() => {
          target.querySelector('.loading-overlay__spinner').classList.add('hidden');
          target.querySelector('.upsell-is-checked').classList.add('hidden');
          target.querySelector('.icon-cart-v2').classList.remove('hidden');
        }, 1000);
      })
      .catch(function (error) {
        console.error('Error:', error);
      });
  }

  window.addEventListener('DOMContentLoaded', function () {
    const wishlist_re_order_btn = document.querySelector('.wishlist-re-order-btn');
    const quantitySpinners = document.querySelectorAll('.wishlist-quantity-spinner');
    let wishListCartData = [];
    let newWishlistData = [];
    quantitySpinnerElem(quantitySpinners, ".wishlist-minus__button", ".wishlist-plus__button", ".wishlist-quantity__input", ".wishlist-re-order-btn");
    if (wishlist_re_order_btn) {
      wishlist_re_order_btn.addEventListener('click', function (event) {
        this.classList.add('loading');
        this.innerHTML = `<div class="loading-overlay__spinner">
          <svg
            aria-hidden="true"
            focusable="false"
            role="presentation"
            class="spinner"
            viewBox="0 0 66 66"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
          </svg>
        </div>`;
        quantitySpinners.forEach((quantitySpinner) => {
          const quantityInput = quantitySpinner.querySelector('.wishlist-quantity__input');
          let item = quantitySpinner.parentNode.parentNode.dataset.variant;
          let quantityValue = quantityInput.value;
          wishListCartData.push({
            id: item,
            quantity: quantityValue,
          });
        });
        const reducedWishlistCartData = wishListCartData;
        let result = reducedWishlistCartData.reduce((acc, curr) => {
          let item = acc.find((item) => item.id === curr.id);
          if (item) {
            item.quantity = curr.quantity;
          } else {
            acc.push(curr);
            newWishlistData.push(curr);
          }
          return acc;
        }, []);
        newWishlistData = newWishlistData.filter((item) => item.quantity > 0);
        var data = {
          items: newWishlistData,
        };
        addToCart(data, this);
      });
    }
  });

  document.addEventListener('DOMContentLoaded', function () {
    const orderlist_re_order_btn = document.querySelector('.orderlist-re-order-btn');
    const quantitySpinners = document.querySelectorAll('.orderlist-quantity-spinner');
    let wishListCartData = [];
    let newWishlistData = [];
    quantitySpinnerElem(quantitySpinners, ".orderlist-minus__button", ".orderlist-plus__button", ".orderlist-quantity__input", ".orderlist-re-order-btn");
    if (orderlist_re_order_btn) {
      orderlist_re_order_btn.addEventListener('click', function (event) {
        this.classList.add('loading');
        this.innerHTML = `<div class="loading-overlay__spinner">
          <svg
            aria-hidden="true"
            focusable="false"
            role="presentation"
            class="spinner"
            viewBox="0 0 66 66"
            xmlns="http://www.w3.org/2000/svg"
          >
            <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
          </svg>
        </div>`;
        quantitySpinners.forEach((quantitySpinner) => {
          const quantityInput = quantitySpinner.querySelector('.orderlist-quantity__input');
          let item = quantitySpinner.parentNode.parentNode.dataset.variant;
          let quantityValue = quantityInput.value;
          wishListCartData.push({
            id: item,
            quantity: quantityValue,
          });
        });
        const reducedWishlistCartData = wishListCartData;
        let result = reducedWishlistCartData.reduce((acc, curr) => {
          let item = acc.find((item) => item.id === curr.id);
          if (item) {
            item.quantity = curr.quantity;
          } else {
            acc.push(curr);
            newWishlistData.push(curr);
          }
          return acc;
        }, []);
        newWishlistData = newWishlistData.filter((item) => item.quantity > 0);
        var data = {
          items: newWishlistData,
        };
        addToCart(data, this);
      });
    }
  });

    const productSearch = () => {
      const searchInput = document.getElementById('productSearch');
      if (searchInput) {
        searchInput.addEventListener('keyup', function() {
        const query = this.value.toLowerCase();
        const products = document.querySelectorAll('.product_grid_item');
        products.forEach(function(product) {
          const title = product.querySelector('.product_title').textContent.toLowerCase();
          const sku = product.querySelector('.sku') ? product.querySelector('.sku').textContent.toLowerCase() : '';
          if (title.includes(query) || sku.includes(query)) {
            product.style.display = '';
          } else {
            product.style.display = 'none';
          }
        });
      });
      }
     
    }
    const toggleClearButton = () => {
      const searchInput = document.getElementById('productSearch');
        const clearButton = document.getElementById('clearButton');
        if (searchInput) {
          if (searchInput.value.length > 0) {
          clearButton.style.display = 'block';
        } else {
          clearButton.style.display = 'none';
        }
        }
        
      }
      const clearSearch  = () =>  {
        const searchInput = document.getElementById('productSearch');
        if (searchInput) {
          searchInput.value = '';
        searchInput.focus(); 
        toggleClearButton();
        const products = document.querySelectorAll('.product_grid_item');
        products.forEach(function(product) {
          product.style.display = '';
        });
        }
       
      }
  document.addEventListener('DOMContentLoaded', () => {
    initTabs();
    initDialog();
    recentOrderInitGrid();
    productSearch();
    toggleClearButton();
    clearSearch();


    const saveButton = document.getElementById('saveOrderBtn');
    const cancelButton = document.getElementById('cancelOrderBtn');
    let initialProductOrder = [];

    function saveInitialProductOrder() {
        const productListContainer = document.getElementById('product__list');
        initialProductOrder = Array.from(productListContainer.querySelectorAll('.wishlist_row'))
            .map(row => row.getAttribute('data-product-id'));
    }

    function restoreInitialProductOrder() {
        const productListContainer = document.getElementById('product__list');
        initialProductOrder.forEach(productId => {
            const product = document.querySelector(`[data-product-id="${productId}"]`).parentNode;
            productListContainer.appendChild(product);
        });
    }
    saveInitialProductOrder();
    document.addEventListener('draggableEvent', () => {
      const items = document.querySelectorAll('#product__list .product_grid_item');

      items.forEach(item => {
        item.setAttribute('draggable', true);
            item.addEventListener('dragstart', dragStart);
            item.addEventListener('dragend', dragEnd);
            item.addEventListener('drop', dropped);
            item.addEventListener('dragenter', cancelDefault);
            item.addEventListener('dragover', cancelDefault);
      });
      function dragStart(e) {
            var index = Array.from(e.target.parentNode.children).indexOf(e.target);
            e.dataTransfer.setData('text/plain', index);
            e.target.classList.add('dragging');
            setTimeout(() => {
                e.target.style.display = 'none';
            }, 0);
        }

        function dragEnd(e) {
            e.target.classList.remove('dragging');
            e.target.style.display = 'block';
        }

        function dropped(e) {
            cancelDefault(e);
            let oldIndex = e.dataTransfer.getData('text/plain');
            let target = e.target.closest('.product_grid_item');
            let newIndex = Array.from(target.parentNode.children).indexOf(target);

            let items = Array.from(target.parentNode.children);
            let dropped = items[oldIndex];

            if (newIndex < oldIndex) {
                target.parentNode.insertBefore(dropped, target);
            } else {
                target.parentNode.insertBefore(dropped, target.nextSibling);
            }

            saveButton.style.display = 'inline-block';
            cancelButton.style.display = 'inline-block';
            saveButton.classList.remove('disabled');
        }

        function cancelDefault(e) {
            e.preventDefault();
            e.stopPropagation();
            return false;
        }

        saveButton.addEventListener('click', async () => {
        await updateProductOrderList();
        saveButton.style.display = 'none';
        cancelButton.style.display = 'none';
        saveInitialProductOrder();
    });

    cancelButton.addEventListener('click', () => {
        restoreInitialProductOrder();
        saveButton.style.display = 'none';
        cancelButton.style.display = 'none';
        saveButton.classList.add('disabled');
    });
      async function updateProductOrderList() {
        const productListContainer = document.getElementById('product__list');
        const productIds = Array.from(productListContainer.querySelectorAll('.wishlist_row'))
          .map(row => row.getAttribute('data-product-id'));
        await window.refreshTokenIfNeeded();
        const currentAccountData = JSON.parse(localStorage.getItem('currentAccount'));
        const { authToken } = window.customerOrdersApp;
        const url = `${window.customerOrdersApp.urlProxy}api/v1/customer/product-list`;
        const token = 'Bearer ' + authToken;
        const productIdPayload = {
          products: productIds,
        }
        const requestOptions = {
          method: 'PUT',
          headers: {
            'Authorization': token,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(productIdPayload),
        };

        fetch(url, requestOptions)
          .then(response => {
            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.text();
          })
          .then(result => {
            var orderListNotif = document.getElementById('account-drawer-notif-order-list-sort');
            orderListNotif.classList.add('show');
            setTimeout(function () {
              orderListNotif.classList.remove('show');
            }, 3000);

          })
          .catch(error => console.error('Failed to update product order:', error));
      }
    });
  });
</script>

<div id="nf_drawer">
  <div class="nf-drawer nf-dialog">
    <div class="nf-drawer-content">
      {% unless customer %}
        <div class="close-wrapper">
          <span class="nf-close-dialog" onclick="window.dialog.close();">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="20"
              width="20"
              viewBox="0 0 448 512"><path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" /></svg>
          </span>
        </div>
      {% endunless %}
      {% if customer %}
        <div class="nf-tab--container">
          <div class="nf-account-tab">
            <div class="nf-dropdown active">
              <span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="24px"
                  height="24px"
                  viewBox="0 0 20 20"
                  fill="currentColor">
                  {% render 'icon-account' %}
                </svg>
              </span>
              <span>
                {{- 'customer.account_drawer.account_tab' | t -}}
              </span>
              <span class="nf-dropdown-caret"></span>
              <div class="nf-dropdown-content">
                <ul class="nf-dropdown-list">
                  <li>
                    <div class="profile__wrapper">
                      <div id="selectedAccountDisplay">
                        {% if customer.first_name %}
                          {{ customer.first_name }}
                        {% else %}
                          {{ customer.email }}
                        {% endif %}
                        {% if customer.current_company.name %}
                          <div>
                            <span class="company_name">{{ customer.current_company.name }}</span>
                          </div>
                        {% endif %}
                      </div>
                      <div class="revert_button_wrapper">
                        <button id="revertBtn" title="Revert to Previous Account">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z" /></svg>
                        </button>
                      </div>
                    </div>

                  </li>
                  {% if customer.tags contains 'COA_Role_Admin' and customer.email contains 'takeaware.nl' or customer.email contains 'newfive.nl' or customer.email contains 'newfive.dev' or customer.email contains 'takeaware.com' or customer.email contains 'dejongdisposables.nl' %}
                    <li>
                      <span class="switchAccount__btn" id="switchAccountBtn">Switch Account</span>
                    </li>
                  {% endif %}
                  <li class="logout_link">
                    <a class="link logout_btn" href="{{ routes.account_logout_url }}">
                      <span>
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          height="16"
                          width="16"
                          viewBox="0 0 512 512">
                            <!-- !Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc. -->
                          <path d="M502.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224 192 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l210.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128zM160 96c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 32C43 32 0 75 0 128L0 384c0 53 43 96 96 96l64 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-64 0c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l64 0z" />
                        </svg>
                      </span>
                      <span>
                        {{ 'customer.account_drawer.logout' | t }}
                      </span>
                    </a>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <div>
            <a class="cart-drawer-icon" href="{{ routes.cart_url }}">
              <span>
                {{ 'customer.account_drawer.cart' | t }}
              </span>
              {%- if cart != empty -%}
                <div class="cart-count-bubble" style="position: relative;bottom: 8px;left: 0px;">
                  {%- if cart.item_count < 100 -%}
                    <span aria-hidden="true">{{ cart.item_count }}</span>
                  {%- endif -%}
                  <span class="hidden">{{ 'sections.header.cart_count' | t: count: cart.item_count }}</span>
                </div>
              {%- endif -%}
            </a>
          </div>
          <div class="close-wrapper">
            <span class="nf-close-dialog" onclick="window.dialog.close();">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                height="20"
                width="20"
                viewBox="0 0 448 512"><path d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" /></svg>
            </span>
          </div>
        </div>
        {% comment %} Super User {% endcomment %}
        <div class="nf-tab-container">
          <button class="tab" data-target="orders">
            <span>{{ 'customer.account_drawer.orders_tab' | t }}</span>
          </button>
          <button class="tab active" data-target="order-lists">
            <span>{{ 'customer.account_drawer.order_list_title' | t }}</span>
          </button>
        {% comment %} <button class="tab" data-target="wishlist">
                                                                                                                                                                            <span>{{ 'customer.account_drawer.favorites_tab' | t }}</span>
                                                                                                                                                                          </button>
                                                                                                                                                                          <button class="tab" data-target="top-ordered__tab">
                                                                                                                                                                            <span>{{ 'customer.account_drawer.top_ordered_tab' | t }}</span>
                                                                                                                                          </button> {% endcomment %}
        </div>
        <div id="orders" class="tab-content">
          <div class="nf-section nf-my-orders__wrapper">
            <div class="nf-section-heading">
              <div>
                <h1>{{ 'customer.account_drawer.my_orders' | t }}</h1>
              </div>
            </div>
            <nf-customer-orders/>
          </div>
        </div>
        <div id="order-lists" class="tab-content active">
          <div class="search-container">
            <div class="field">
              <input
                class="search__input field__input"
                oninput="toggleClearButton()"
                id="productSearch"
                type="search"
                placeholder="Zoeken"
                role="combobox">
              {% comment %} <label class="field__label" for="productSearch">Zoeken</label> {% endcomment %}
              {% comment %} <button class="search__button field__button" aria-label="Zoeken">
                                                                                                                                                                                                                                                                                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" class="icon icon-search">
                                                                                                                                                                                                                                                                                        <path d="M22.938 13.382c-0.036 5.247-4.318 9.472-9.565 9.437s-9.472-4.318-9.436-9.565c0.035-5.223 4.28-9.438 9.503-9.437 5.263 0.023 9.513 4.302 9.501 9.565h-0.003zM26.881 13.382c-0.032-7.423-6.075-13.414-13.498-13.382s-13.414 6.075-13.382 13.497c0.031 7.4 6.039 13.382 13.44 13.382 7.435-0.025 13.447-6.062 13.44-13.498z"></path>
                                                                                                                                                                                                                                                                                        <path d="M29.216 31.882l-8.499-8.451 2.784-2.787 8.499 8.451-2.784 2.787z"></path>
                                                                                                                                                                                                                                                                                    </svg>
                                                                                                                                                                                                                                                  </button> {% endcomment %}
              <button
                id="clearButton"
                onclick="clearSearch()"
                style="display: none;">X</button>
            </div>
          </div>
          <div id="nf-tab_view-order">
            <div class="nf-section nf-my-orders__wrapper">
              <div id="customerProfileName" class="current_customer--name"></div>
              <div class="nf-section-heading">
                {% comment %}              <div>
                                                                                                                                                                                                                                                                                                                  <h1>{{ 'customer.account_drawer.order_list_text' | t }}</h1>
                                                                                                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                                                                {% endcomment %}
              </div>
              <div class="save-cancel-btn--wrapper">
                <button
                  id="saveOrderBtn"
                  class="nf-primary-button save-order-btn disabled"
                  style="display:none;">Save</button>
                <button
                  id="cancelOrderBtn"
                  class="nf-secondary-button cancel-order-btn"
                  style="display:none;">Cancel</button>
              </div>
              <div id="product__list"></div>

            {% comment %} {% if customer.metafields.customer.product_list.value %}
                                                                                                                                                                                                                                                <div class="nf-my-orders__table recently_ordered">
                                                                                                                                                                                                                                                  {%- for product in customer.metafields.customer.product_list.value -%}
                                                                                                                                                                                                                                                    {% render 'nf-account-product-grid'
                                                                                                                                                                                                                                                      , product: product %}
                                                                                                                                                                                                                                                  {% endfor %}
                                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                                                <div class="re-order-cta-btn--wrapper">
                                                                                                                                                                                                                                                  <button class="re-order-cta orderlist-re-order-btn disabled">
                                                                                                                                                                                                                                                    {{ 'customer.account_drawer.re_order_selected_items' | t }}
                                                                                                                                                                                                                                                  </button>
                                                                                                                                                                                                                                                </div>
                                                                                                                                                                                                                                              {% else %}
                                                                                                                                                                                                                                                No Order list
                                                                                                                                                                                                              {% endif %} {% endcomment %}
            </div>
          </div>
        </div>
      {% else %}
        {% render 'nf-account-drawer-login' %}
      {% endif %}
      <div id="account-drawer-notif">Toegevoegd aan winkelwagen</div>
      <div id="account-drawer-notif-error">Toevoegen niet gelukt</div>
      <div class="account-drawer-notification-success" id="account-drawer-notif-order-list-sort">Order List Updated.</div>
    </div>
  </div>

  <dialog id="accountModal">
    <form method="dialog">
      <p>Search a Customer:</p>
      <div class="customer-search-container">
        <input
          type="search"
          id="customerSearchInput"
          placeholder="Search customer">
        <ul id="customerSearchDropdown" class="account-dropdown-content"></ul>
      </div>
      <menu>
        <button id="cancelBtn" value="cancel">Cancel</button>
        <button id="confirmBtn">Confirm</button>
      </menu>
    </form>
  </dialog>
</div>