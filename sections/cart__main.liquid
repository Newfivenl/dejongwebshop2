<!-- sections/cart__main.liquid -->
{% comment %} 
  Main section of the cart template.

  Globals:
    - settings.layout_horizontal: horizontaly margin

  Possible enhancements:
    - Add support for cart behavior to go to cart page after adding.

  Pro tips:
    - This template isn't primarly used since the cart drawer will be used instead.
{% endcomment %}

{% style %}
  .cart-draft-button{
    border: 0 !important;
    display: flex;
      align-items: center;
      background: #EA5125;
      width: 100%;
      margin-top: 8px;
      box-shadow: none!important;
      font-size: 18px;
      letter-spacing: .1rem;
      line-height: calc(1 + .2 / var(--font-body-scale));
      position: relative;
      color: #fff;
      font-family: var(--type-font-nav-family);
    font-style: var(--type-font-nav-style);
    font-weight: var(--type-font-nav-weight);
    letter-spacing: 0.025em;
  }
  .cart-draft-button .loading-overlay__spinner  {
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
      height: 100%;
      background: #EA5125;
      z-index: 2;
      position: absolute;
  }
  .cart-draft-button .loading-overlay__spinner svg {
      right: 20px;
      width: 24px;
      height: 24px;
}
  .cart-draft-button svg{
    margin-right: 8px;
    width: 18px;
    fill: var(--color-primary-button-text-light);
  }
  #create_draft_snackbar {
    visibility: hidden;
    min-width: 250px;
    background-color: #41CB42;
    color: #fff;
    text-align: center;
    border-radius: 2px;
    padding: 16px;
    position: fixed;
    z-index: 210;
    right: 30px;
    top: 30px;
    font-size: 14px;
  }
  .clear-cart-button{
    background: transparent;
    border: 1px solid #EA5125;
    color: #EA5125;
  }
  .clear-cart-button:hover{
    text-decoration: none;
  }
  #create_draft_snackbar.show {
      visibility: visible;
      -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
      animation: fadein 0.5s, fadeout 0.5s 2.5s;
  }
  
  @-webkit-keyframes fadein {
    from {
      right: 0;
      opacity: 0;
    }
  
    to {
      right: 30px;
      opacity: 1;
    }
  }
  
  @keyframes fadein {
    from {
      right: 0;
      opacity: 0;
    }
  
    to {
      right: 30px;
      opacity: 1;
    }
  }
  
  @-webkit-keyframes fadeout {
    from {
      right: 30px;
      opacity: 1;
    }
  
    to {
      right: 0;
      opacity: 0;
    }
  }
  
  @keyframes fadeout {
    from {
      right: 30px;
      opacity: 1;
    }
  
    to {
      right: 0;
      opacity: 0;
    }
  }
  {% endstyle %}
  

<section class="{{ section.settings.page_color_scheme }}"
  style="
    padding-bottom:{{ section.settings.spacing_bottom }}px;
    padding-top:{{ section.settings.spacing_top }}px;">

  <div class="
    {{ settings.layout_horizontal }}">
    {%- comment -%}headline{%- endcomment -%}
    <div class="flex flex-wrap items-start">
      {% if cart.item_count > 0 %}
        <div class="w-full px-4">
          <h1>{{ 'cart.general.cart_heading' | t }} (<span x-text="cart.item_count">{{ cart.item_count }}</span>)</h1>
        </div>
        {% if customer.tags contains 'COA_Role_Admin' and customer.email contains 'takeaware.nl' or customer.email contains 'newfive.nl' or customer.email contains 'newfive.dev' or customer.email contains 'takeaware.com' or customer.email contains 'dejongdisposables.nl' %}                <div class="w-full px-4 pb-4">
          <div class="w-full">
              <form action="/cart/clear" method="post" novalidate class="empty-cart-form">
                <button type="submit" class="btn btn mb-2 clear-cart-button">Clear cart</button>
              </form>
            </div>
          {% endif %}
      {% else %}
        <div class="w-full">
          <h1>{{ 'cart.general.empty' | t }}</h1>
        </div>
        <a class="btn" href="{{ section.settings.empty_button_url }}">
          {{ section.settings.empty_button_label }}
        </a>
      {% endif %}
    </div>
    <div class="!w-full">
      <form action="{{ routes.cart_url }}" method="post">
      <div class="!w-full flex flex-wrap items-start">
        {%- comment -%}cart{%- endcomment -%}
        <div class="md:w-2/3 md:border--r-width w-full
          {{ section.settings.color_border }}">
          <template x-for="(item, index) in cart.items">
            <div>
              <div class="border--b-width flex w-full py-4 md:pr-4 gap-2
                {{ section.settings.main_color_scheme_first }}
                {{ section.settings.main_color_border }}">
                <a class="w-[20%] h-full"
                  :href="item.url">
                  <div class="border--radius object-cover max-w-full overflow-hidden
                    {{ settings.thumbnails_ratio }}
                    {{ settings.thumbmails_color_scheme }}">
                    {% capture image_class %}w-full h-full object-cover {{ settings.thumbmails_color_scheme }} {% endcapture %}
                    <img class="{{ image_class }}" 
                      loading="lazy"
                      :src="item.image" 
                      :alt="item.product_title" 
                      />
                  </div>
                </a>

                <div class="animation-500 flex flex-col justify-between flex-grow"
                  {% if settings.enable_animations %}
                    :class="{ 
                      'opacity-50' : cart_loading }"
                  {% endif %}>
                  <div class="flex items-start justify-between gap-2">
                    <a class="hover:no-underline no-underline" :href="item.url" tabindex="-1">
                      <p class="mb-0 !leading-tight" x-text="item.product_title"></p>
                      <template x-if="item.properties">
                        <template x-for="property in Object.entries(item.properties)">
                          <p class="type--smaller mb-0 opacity-75" x-text="property[0] + ' : ' + property[1]"></p>
                        </template>
                      </template>
                        
                      
                      <p class="type--smaller mb-0 opacity-75" x-text="item.variant_title"></p>    
                      {% if settings.enable_sku %}
                        <p class="type--smaller mb-0 opacity-75" x-text="item.sku"></p>
                      {% endif %}       
                      <p class="type--smaller mb-0 opacity-75" x-text="item.selling_plan_allocation ? item.selling_plan_allocation.selling_plan.name : ''"></p>
                      <template x-for="(discount) in item.discounts">
                        <div class="mt-2">
                          {% capture badge_content %}
                            <span class="type--smaller type__nav mr-1" x-text="discount.title"></span>
                            <span class="type--smaller type__nav mr-1">{% if settings.type_seperator == 'dot' %}Â·{% else %}|{% endif %}</span>
                            <span class="type--smaller type__nav" x-text="Shopify.formatMoney(discount.amount, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')"></span>
                          {% endcapture %}
                          {% render 'component__badge', 
                            color: 'overlay-2',
                            text: 'text',
                            icon: 'tag',
                            content: badge_content %}
                        </div>
                      </template>
                    </a>

                    <div class="flex flex-col items-end">
                      <span class="!leading-tight" x-text="Shopify.formatMoney(item.line_price, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')"></span>
                      <span
                        x-show="item.total_discount > 0"
                        x-cloak>
                        <s class="!leading-tight" 
                          x-text="Shopify.formatMoney(item.original_line_price, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')">
                        </s>
                      </span>
                      <span class="type--small" x-show="item.unit_price_measurement">
                        <span x-text="Shopify.formatMoney(item.unit_price, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')"></span>
                        <span>/</span>
                        <span x-text="
                          if(item.unit_price_measurement){
                            return item.unit_price_measurement.reference_value;
                          }"></span>
                        <span x-text="
                          if(item.unit_price_measurement){
                            return item.unit_price_measurement.reference_unit;
                          }"></span>
                      </span>
                    </div>

                  </div>
                  <div class="flex items-center justify-between gap-2 mt-2">

                    <div class="relative flex max-w-[150px] color__text color__border-divider-2 border--width hover:color__border-selected-1 color__bg-overlay-1 border__input--radius overflow-hidden animation-500" 
                      x-data="{ 
                        button_loading: false
                      }">
                      <button class="btn btn--smaller btn--plain shrink-0 !rounded-none !pr-0 !pl-0 !bg-[#E0E0E0] !border-[#E0E0E0] !text-[#333]" 
                        :disabled="button_loading"
                        title="{{ 'cart.general.decrease' | t }}"
                        @click.prevent="
                          if(changeCartItemQuantity(item.key, item.quantity-1, false, false)) {
                            button_loading = true; 
                            item.quantity--;
                            setTimeout(function(){ button_loading = false}, 500);
                          }">
                        {% render 'component__icon', icon: 'minus', size: '14', class: '' %}
                      </button>
                      <label :for="'cart-' + item.key + '-quantity'" class="sr-only">{{ 'products.general.quantity' | t }}</label>
                      <input :id="'cart-' + item.key + '-quantity'" placeholder="1" type="text" 
                        class="form-input !border-0 text-center !rounded-none !bg-[#E0E0E0] !text-[#333] !text-[16px]" 
                        @change.debounce="
                          changeCartItemQuantity(item.key, item.quantity, false);
                          button_loading = true; 
                          setTimeout(function(){ button_loading = false}, 500);" 
                        x-model='item.quantity'>
                      <div class="btn__spinner btn--smaller !w-auto"
                        :class="{ '!visible color__bg-overlay-1 z-10' : button_loading }">
                        {% render 'component__icon', icon: 'spinner', size: '16', class: '' %}
                      </div>
                      <button class="btn btn--smaller btn--plain shrink-0 !rounded-none !pr-0 !pl-0 !bg-[#E0E0E0] !border-[#E0E0E0] !text-[#333]" 
                        :disabled="button_loading"
                        title="{{ 'cart.general.increase' | t }}"
                        @click.prevent="
                          if(changeCartItemQuantity(item.key, item.quantity+1, false, false)) {
                            button_loading = true; 
                            item.quantity++;
                            setTimeout(function(){ button_loading = false}, 500);
                          }">
                        {% render 'component__icon', icon: 'plus', size: '14', class: '' %}
                      </button>
                    </div>
                    
                    <div x-data="{ button_loading: false }">
                      <button 
                        class="btn btn--load btn--plain btn--small"
                        :class="{ 'btn--loading' : cart_loading && button_loading }"
                        :disabled="button_loading"
                        @click="changeCartItemQuantity(item.key, 0, false); button_loading = true; setTimeout(function(){ button_loading = false}, 500);" >
                        {% render 'component__icon', icon: 'trash', size: '14', class: '' %}
                        <div class="btn__spinner">
                          {% render 'component__icon', icon: 'spinner', size: '20', class: '' %}
                        </div>
                      </button>
                    </div>
                  </div>
                </div>
                
              </div>
            </div>
          </template>
        </div>

        {%- comment -%}sidebar{%- endcomment -%}
        {% if cart.total_price > 0 %}
          <aside class="md:w-1/3 border--t-width sticky top-0 w-full
            {{ section.settings.color_border }}
            {{ section.settings.sidebar_color_scheme }}">
              
            {%- comment -%}subtotal{%- endcomment -%}
            <div class="border--b-width w-full p-4 
              {{ section.settings.color_border }}">
              <div class="flex items-center justify-between w-full mb-1">
                <span>{{ 'cart.general.subtotal' | t }}</span>
                <span x-text="Shopify.formatMoney(cart.original_total_price, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')">{{ cart.original_total_price | money }}</span>
              </div>
              <div  x-show="cart.total_discount != 0"  class="flex items-center justify-between w-full mb-1">
                <span>{{ 'cart.general.discount' | t }}</span>
                <span x-text="Shopify.formatMoney(cart.total_discount, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')">-{{ cart.total_discount | money }}</span>
              </div>
              <div class="flex items-center justify-between w-full">
                <span class="flex items-center w-full">
                  <strong>{{ 'cart.general.total' | t }}</strong>
                  {% if cart.taxes_included %}
                    {%- capture taxes_included -%}
                      {{ 'customer.order.taxes_included' | t }}
                    {%- endcapture -%}
                    <div class="ml-1">
                      {% render 'component__badge', 
                        color: 'overlay-1',
                        icon: '',
                        content: taxes_included %}
                    </div>
                  {% endif %}
                </span>
                <strong x-text="Shopify.formatMoney(cart.total_price, currency_symbol, {{ settings.enable_currency }}, '{{ settings.price_format }}', '{{ settings.currency_subunit_value }}')">{{ cart.total_price | money }}</strong>
              </div>
            </div>

            {%- comment -%}notes{%- endcomment -%}
            {% if section.settings.enable_cart_note %}
              <div class="border--b-width w-full p-4 
                {{ section.settings.color_border }}" 
                x-data="{ reveal: cart.note != '', currentNote: cart.note }"
                x-show="cart.items.length > 0"
                x-cloak>
                <label class="flex items-center">
                  <label for="notes" class="sr-only">{{ 'cart.notes.title' | t }}</label>
                  <input id="notes" :checked="reveal" type="checkbox" class="form-checkbox" @click="reveal = ! reveal">
                  <p class="text--small mb-0 ml-2">{{ 'cart.notes.add' | t }}</p>
                </label>
                <textarea 
                  name="note"
                  rows="4" 
                  class="form-textarea border--radius w-full mt-2"
                  placeholder="{{ 'cart.notes.placeholder_alt' | t }}"
                  x-model="currentNote"
                  @keydown.debounce="updateCartNote(currentNote)"
                  x-show="reveal"
                  x-cloak></textarea>
              </div>
            {% endif %}
            {%- comment -%}checkout{%- endcomment -%}
            <div class="mt-auto">
              {% if customer.tags contains 'COA_Role_Admin' and customer.email contains 'takeaware.nl' or customer.email contains 'newfive.nl' or customer.email contains 'newfive.dev' or customer.email contains 'takeaware.com' or customer.email contains 'dejongdisposables.nl' %}                <div class="w-full px-4 pb-4">
                 
                    <button id="createDraftOrderBtn"
                      class="btn !w-full btn mb-2 cart-draft-button"
                    >
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M441 58.9L453.1 71c9.4 9.4 9.4 24.6 0 33.9L424 134.1 377.9 88 407 58.9c9.4-9.4 24.6-9.4 33.9 0zM209.8 256.2L344 121.9 390.1 168 255.8 302.2c-2.9 2.9-6.5 5-10.4 6.1l-58.5 16.7 16.7-58.5c1.1-3.9 3.2-7.5 6.1-10.4zM373.1 25L175.8 222.2c-8.7 8.7-15 19.4-18.3 31.1l-28.6 100c-2.4 8.4-.1 17.4 6.1 23.6s15.2 8.5 23.6 6.1l100-28.6c11.8-3.4 22.5-9.7 31.1-18.3L487 138.9c28.1-28.1 28.1-73.7 0-101.8L474.9 25C446.8-3.1 401.2-3.1 373.1 25zM88 64C39.4 64 0 103.4 0 152V424c0 48.6 39.4 88 88 88H360c48.6 0 88-39.4 88-88V312c0-13.3-10.7-24-24-24s-24 10.7-24 24V424c0 22.1-17.9 40-40 40H88c-22.1 0-40-17.9-40-40V152c0-22.1 17.9-40 40-40H200c13.3 0 24-10.7 24-24s-10.7-24-24-24H88z"/></svg>
                    Create Draft Order
                    <div class="loading-overlay__spinner !hidden">
                      <svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg">
                          <circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle>
                      </svg>
                  </div>
                    </button>
                </div>
                  {% endif %}
                  <div id="buuntocal"></div>

              <div class="w-full p-4">
                <label for="checkout" class="sr-only">{{ 'cart.general.checkout' | t }}</label>
                <input 
                  id="checkout"
                  class="!w-full btn mb-2"
                  type="submit" 
                  name="checkout" 
                  x-bind:value="`{{ 'cart.general.checkout' | t }} {% if settings.type_seperator == 'dot' %}Â·{% else %}|{% endif %} ` + Shopify.formatMoney(cart.total_price, currency_symbol, true, 'amount_no_decimals', '100')"
                  value="{{ 'cart.general.checkout' | t }} {% if settings.type_seperator == 'dot' %}Â·{% else %}|{% endif %} {{ cart.total_price | money_with_currency | strip_html }}">

                {% if section.settings.enable_dynamic_checkout %}
                  {% if additional_checkout_buttons %}
                    <div class="additional-checkout-buttons additional-checkout-buttons--vertical mb-2">
                      {{ content_for_additional_checkout_buttons }}
                    </div>
                  {% endif %}
                {% endif %}
                {%- unless section.settings.main_disclaimer == blank %}
                  <div class="type--smaller m-0--clear">
                    {{ section.settings.main_disclaimer }}
                  </div>
                {%- endunless -%}
              </div>
                
            </div>

          
            
          </aside>
        {% endif %}

      </div>
    </form>
    </div>
   
      
  </div>
</section>
<div id="create_draft_snackbar">Draft Order Created</div>
<script>
  // Create Draft Order Function
  function showSnackbar() {
    var snackbar = document.getElementById("create_draft_snackbar");
    snackbar.className = "show";
    setTimeout(function(){ snackbar.className = snackbar.className.replace("show", ""); }, 3000);
}


   async function createDraftOrder(event) {
                  event.preventDefault();
                  await window.refreshTokenIfNeeded();

                  const button = document.getElementById('createDraftOrderBtn');
                  const url = `${window.customerOrdersApp.urlProxy}api/v1/order/draft`;
                  const token = 'Bearer ' + window.customerOrdersApp.authToken;
                  const cart = {{ cart | json }};
                  const spinner = button.querySelector('.loading-overlay__spinner');
                  
                  button.querySelector('.loading-overlay__spinner').classList.remove('!hidden');
                  if (!cart.items || cart.items.length === 0) {
                    console.error('Cart is empty or cart data not found.');
                    return;
                  }
                  const payload = {
                    customer_id: JSON.parse(localStorage.getItem('currentAccount'))?.customerID ?? '{{ customer.id }}',
                    line_items: cart.items.map(item => ({
                      variant_id: item.variant_id,
                      quantity: item.quantity
                    }))
                  };
                  try {
                    const response = await fetch(url, {
                      method: 'POST',
                      headers: {
                        'Authorization': token,
                        'Content-Type': 'application/json'
                      },
                      body: JSON.stringify(payload)
                    });
                    if (!response.ok) {
                      throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    const data = await response.json();
                    console.log('Draft Order created:', data);
                    showSnackbar();
                  } catch (error) {
                      console.error('Error creating draft order:', error);
                  } finally {
                      spinner.classList.add('!hidden');
                  }
                }
                // Attach event listener to the draft order button
                document.getElementById('createDraftOrderBtn').addEventListener('click', createDraftOrder);
</script>
{% schema %}
{
  "name":"t:sections.cart.name",
  "settings":[
    {
      "type": "header",
      "content": "t:sections.all.headers.header__22.content"
    },
    {
      "type":"range",
      "id":"spacing_top",
      "min":0,
      "max":300,
      "step":20,
      "unit":"px",
      "label":"t:sections.all.layout.settings.spacing.label_top",
      "default":60
    },
    {
      "type":"range",
      "id":"spacing_bottom",
      "min":0,
      "max":300,
      "step":20,
      "unit":"px",
      "label":"t:sections.all.layout.settings.spacing.label_bottom",
      "default":60
    },
    {
      "type":"header",
      "content":"t:sections.all.headers.header__6.content"
    },
    {
      "type":"select",
      "id":"page_color_scheme",
      "label":"t:sections.all.colors.settings.color_scheme.label",
      "options":[
        {
          "value":"color__bg-body color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__1.label"
        },
        {
          "value":"color__bg-neutral color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__2.label"
        },
        {
          "value":"color__bg-overlay-1 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__3.label"
        },
        {
          "value":"color__bg-overlay-2 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__4.label"
        },
        {
          "value":"color__bg-overlay-3 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__5.label"
        },
        {
          "value":"color__bg-primary color__primary",
          "label":"t:sections.all.colors.settings.color_scheme.options__6.label"
        },
        {
          "value":"color__bg-secondary color__secondary",
          "label":"t:sections.all.colors.settings.color_scheme.options__7.label"
        },
        {
          "value":"color__bg-tertiary color__tertiary",
          "label":"t:sections.all.colors.settings.color_scheme.options__8.label"
        }
      ],
      "default":"color__bg-overlay-1 color__text"
    },
    {
      "type":"select",
      "id":"color_border",
      "label":"t:sections.all.colors.settings.color_border.label",
      "options":[
        {
          "value":"color__border-divider-1",
          "label":"t:sections.all.colors.settings.color_border.options__1.label"
        },
        {
          "value":"color__border-selected-1",
          "label":"t:sections.all.colors.settings.color_border.options__2.label"
        },
        {
          "value":"!color__border-transparent",
          "label":"t:sections.all.colors.settings.color_border.options__3.label"
        }
      ],
      "default":"color__border-divider-1"
    },
    {
      "type":"header",
      "content":"t:sections.all.headers.header__7.content"
    },
    {
      "type":"select",
      "id":"sidebar_color_scheme",
      "label":"t:sections.all.colors.settings.color_scheme.label",
      "options":[
        {
          "value":"color__bg-body color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__1.label"
        },
        {
          "value":"color__bg-neutral color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__2.label"
        },
        {
          "value":"color__bg-overlay-1 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__3.label"
        },
        {
          "value":"color__bg-overlay-2 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__4.label"
        },
        {
          "value":"color__bg-overlay-3 color__text",
          "label":"t:sections.all.colors.settings.color_scheme.options__5.label"
        },
        {
          "value":"color__bg-primary color__primary",
          "label":"t:sections.all.colors.settings.color_scheme.options__6.label"
        },
        {
          "value":"color__bg-secondary color__secondary",
          "label":"t:sections.all.colors.settings.color_scheme.options__7.label"
        },
        {
          "value":"color__bg-tertiary color__tertiary",
          "label":"t:sections.all.colors.settings.color_scheme.options__8.label"
        }
      ],
      "default":"color__bg-overlay-1 color__text"
    },
    {
      "type":"richtext",
      "id":"main_disclaimer",
      "label":"t:sections.cart.settings.main_disclaimer.label"
    },
    {
      "type":"header",
      "content":"t:sections.all.headers.header__9.content"
    },
    {
      "type":"text",
      "id":"empty_button_label",
      "label":"t:sections.cart.settings.empty_button_label.label",
      "default":{
        "en":"Shop all",
        "es": "Comprar todo",
        "it": "Acquista tutto",
        "de": "Alles kaufen",
        "fr": "Magasiner tout"
      }
    },
    {
      "type":"url",
      "id":"empty_button_url",
      "label":"t:sections.cart.settings.empty_button_url.label",
      "default":"/collections/all"
    },
    {
      "type":"header",
      "content":"t:sections.all.headers.header__8.content"
    },
    {
      "type":"checkbox",
      "id":"enable_cart_note",
      "label":"t:sections.cart.settings.enable_cart_note.label"
    },
    {
      "type":"checkbox",
      "id":"enable_dynamic_checkout",
      "label":"t:sections.cart.settings.enable_dynamic_checkout.label"
    }
  ],
  "presets":[
    {
      "name":"t:sections.cart.name"
    }
  ],
  "templates":[
    "cart"
  ]
}
{% endschema %}