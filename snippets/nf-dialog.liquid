{% assign wishlist_product_list = customer.metafields.fieldsraven.new_order_wishlist.value | reverse %}
<script src="{{ 'product-form.js' | asset_url }}" defer="defer"></script>
<script type="text/javascript">
  window.wishlistProductListObj = {{ wishlist_product_list | json | default: '[]' }};
  window.productIds = [];

  function initTabs() {
    const tabLinks = document.querySelectorAll('.nf-tab-links li');
    const tabContent = document.querySelectorAll('.nf-tab-content .tab');
    tabLinks.forEach((tabLink, i) => {
      tabLink.addEventListener('click', function(e) {
        e.preventDefault();
        const target = this.querySelector('a').getAttribute('href');

        tabContent.forEach(content => content.classList.remove('active'));
        tabLinks.forEach(link => link.classList.remove('active'));

        this.classList.add('active');
        document.querySelector(target).classList.add('active');
      });
    });
  }

  const initDialog = () => {
    const dialog = document.querySelector('dialog');
    const closeDialogButton = document.querySelector('.nf-close-dialog');

    closeDialogButton.onclick = function() {
      dialog.classList.add('hide');
      dialog.addEventListener('webkitAnimationEnd', function() {
        dialog.classList.remove('hide');
        dialog.close();
        dialog.removeEventListener('webkitAnimationEnd', arguments.callee, false);
      }, false);
    };
  };

  const quantitySpinnerElem = (quantitySpinners, minusButton, plusButton, quantityInputField, atcButtonClass, displayElementClass) => {
quantitySpinners.forEach((quantitySpinner) => {
  const minusBtn = quantitySpinner.querySelector(minusButton);
  const plusBtn = quantitySpinner.querySelector(plusButton);
  const quantityInput = quantitySpinner.querySelector(quantityInputField);
  const atcButton = document.querySelector(atcButtonClass);
  const displayAddedQuantity = document.querySelector(displayElementClass);
  const allSpinners = document.querySelectorAll(quantityInputField);

  const wishlistRow = quantitySpinner.closest('.wishlist_row');
  const stockCountElement = wishlistRow.querySelector('.nf-stocked-count') || null;

  const updateRowHighlight = () => {
    const quantity = parseInt(quantityInput.value) || 0;
    const stockCount = stockCountElement ? parseInt(stockCountElement.textContent || stockCountElement.innerText) : Infinity;

    if (quantity > stockCount) {
      wishlistRow.classList.remove('nf-row-selected');
      wishlistRow.classList.add('nf-row-overstock');
    } else if (quantity > 0 && quantity <= stockCount) {
      wishlistRow.classList.add('nf-row-selected');
      wishlistRow.classList.remove('nf-row-overstock');
    } else {
      wishlistRow.classList.remove('nf-row-selected');
      wishlistRow.classList.remove('nf-row-overstock');
    }
  };

  const updateCTAButton = () => {
    let totalQuantity = 0;
    allSpinners.forEach((spinner) => {
      totalQuantity += parseInt(spinner.value) || 0;
    });

    if (totalQuantity > 0) {
      atcButton.classList.remove('disabled');
      atcButton.disabled = false;
    } else {
      atcButton.classList.add('disabled');
      atcButton.disabled = true;
    }
  };

  const updateQuantityButtons = () => {
    const quantity = parseInt(quantityInput.value) || 0;
    minusBtn.classList.toggle('disabled', quantity <= 0);
  };

  const checkStockCount = () => {
    if (stockCountElement) {
      const stockCountValue = stockCountElement.textContent || stockCountElement.innerText;
      updateRowHighlight(); 
    }
  };

  quantityInput.addEventListener('input', (e) => {
    let inputValue = parseInt(e.target.value);
    inputValue = isNaN(inputValue) || inputValue < 0 ? 0 : inputValue;
    quantityInput.value = inputValue;
    updateQuantityButtons();
    // updateAddedQuantityDisplay(allSpinners, displayAddedQuantity);
    if(stockCountElement) { 
      checkStockCount();
    } else {
      updateRowHighlight();
    }
    updateCTAButton();
    updateSubtotal(allSpinners);
  });

  minusBtn.addEventListener('click', () => {
    let currentValue = parseInt(quantityInput.value) || 0;
    quantityInput.value = Math.max(currentValue - 1, 0);
    updateQuantityButtons();
    // updateAddedQuantityDisplay(allSpinners, displayAddedQuantity);
    if(stockCountElement) { 
      checkStockCount();
    } else {
      updateRowHighlight();
    }
    updateCTAButton();
    updateSubtotal(allSpinners);
  });

  plusBtn.addEventListener('click', () => {
    quantityInput.value = (parseInt(quantityInput.value) || 0) + 1;
    updateQuantityButtons();
    // updateAddedQuantityDisplay(allSpinners, displayAddedQuantity);
    if(stockCountElement) { 
      checkStockCount();
    } else {
      updateRowHighlight();
    }
    updateCTAButton();
    updateSubtotal(allSpinners);
  });

  updateQuantityButtons();
});
};



  const updateAddedQuantityDisplay = (spinners, displayElement) => {
    let totalQuantity = Array.from(spinners).reduce((acc, spinner) => acc + parseInt(spinner.value) || 0, 0);
    displayElement.innerText = `${totalQuantity}`;
  };

  const accountNotif = (isError = false) => {
    const notifId = isError ? 'account-drawer-notif-error' : 'account-drawer-notif';
    const notif = document.getElementById(notifId);
    notif.className = 'show';
    setTimeout(() => notif.className = '', 1000);
  };

  const addToCart = (data, classElem) => {
fetch('/cart/add.js', {
  body: JSON.stringify(data),
  credentials: 'same-origin',
  headers: {
    'Content-Type': 'application/json',
    'X-Requested-With': 'xmlhttprequest'
  },
  method: 'POST'
})
.then((response) => response.json())
.then((json) => {
  const notif = document.querySelector("#nf-add-to-cart-modal-notif");
  if (notif) {
    notif.style.display = "block";
  }
  setTimeout(function () {
    if (notif) {
      notif.style.display = "none";
    }
  }, 1000);
  classElem.innerHTML = ` {{ 'customer.account_drawer.re_order_selected_items' | t }}`;
  classElem.classList.remove('loading');
  classElem.classList.add('loaded');
  // document.querySelector('.display-quantity-wrapper').classList.remove('nf-hidden');
  resetQuantities();
})
.catch((err) => {
  console.error(err);
});
};

const resetQuantities = () => {
  document.querySelectorAll('.orderlist-quantity__input').forEach(input => {
    input.value = 0;
    const wishlistRow = input.closest('.wishlist_row');
    if (wishlistRow) {
      wishlistRow.classList.remove('nf-row-selected', 'nf-row-overstock');
    }
  });
};

  const productSearch = () => {
    const searchInput = document.getElementById('productSearch');
    if (searchInput) {
      searchInput.addEventListener('keyup', function () {
        const query = this.value.toLowerCase();
        document.querySelectorAll('.product_grid_item').forEach((product) => {
          const title = product.querySelector('.product_title').textContent.toLowerCase();
          const sku = product.querySelector('.sku')?.textContent.toLowerCase() || '';
          product.style.display = title.includes(query) || sku.includes(query) ? '' : 'none';
        });
      });
    }
  };

  const toggleClearButton = () => {
    const searchInput = document.getElementById('productSearch');
    const clearButton = document.getElementById('clearButton');
    if (clearButton) clearButton.style.display = searchInput.value.length > 0 ? 'block' : 'none';
  };

  const clearSearch = () => {
    const searchInput = document.getElementById('productSearch');
    if(searchInput) searchInput.value = '';
    if(searchInput) searchInput.focus();
    toggleClearButton();
    document.querySelectorAll('.product_grid_item').forEach(product => product.style.display = '');
  };

  document.addEventListener('DOMContentLoaded', function () {
    initTabs();
    initDialog();
    productSearch();
    toggleClearButton();

    const orderlistReorderBtn = document.querySelector('.orderlist-re-order-btn');
    const quantitySpinners = document.querySelectorAll('.orderlist-quantity-spinner');
    quantitySpinnerElem(quantitySpinners, ".orderlist-minus__button", ".orderlist-plus__button", ".orderlist-quantity__input", ".orderlist-re-order-btn", ".sub-display-added-quantity");

    if (orderlistReorderBtn) {
      orderlistReorderBtn.addEventListener('click', function () {
        this.classList.add('loading');
        this.innerHTML = `<div class="loading-overlay__spinner"><svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle></svg></div>`;
        
        let wishListCartData = [];
        quantitySpinners.forEach((quantitySpinner) => {
          const quantityInput = quantitySpinner.querySelector('.orderlist-quantity__input');
          let item = quantitySpinner.parentNode.parentNode.dataset.variant;
          let quantityValue = quantityInput.value;
          wishListCartData.push({ id: item, quantity: quantityValue });
        });

        let newWishlistData = wishListCartData.filter(item => item.quantity > 0);
        const data = { items: newWishlistData };

        addToCart(data, this);
      });
    }
  });


  const setupDragAndDropOrderList = (listContainer) => {
    setupDragAndDrop(listContainer, updateProductOrderList);
  }

  const setupDragAndDrop = (listContainer, updateFunction) => {
    let draggableItem;
    let pointerStartX, pointerStartY;
    let itemsGap = 0;
    let items = [];
    let prevRect = {};

    const getAllItems = () => {
      if (!items.length) {
        items = Array.from(listContainer.querySelectorAll('.js-item'));
      }
      return items;
    }

    const getIdleItems = () => {
      return getAllItems().filter(item => item.classList.contains('is-idle'));
    }

    const isItemAbove = (item) => {
      return item.hasAttribute('data-is-above');
    }

    const isItemToggled = (item) => {
      return item.hasAttribute('data-is-toggled');
    }

    const setItemsGap = () => {
      if (getIdleItems().length <= 1) {
        itemsGap = 0;
        return;
      }

      const item1 = getIdleItems()[0];
      const item2 = getIdleItems()[1];
      const item1Rect = item1.getBoundingClientRect();
      const item2Rect = item2.getBoundingClientRect();
      itemsGap = Math.abs(item1Rect.bottom - item2Rect.top);
    }

    const disablePageScroll = () => {
      document.body.style.overflow = 'hidden';
      document.body.style.touchAction = 'none';
      document.body.style.userSelect = 'none';
    }

    const initItemsState = () => {
      getIdleItems().forEach((item, i) => {
        if (getAllItems().indexOf(draggableItem) > i) {
          item.dataset.isAbove = '';
        }
      });
    }

    const initDraggableItem = () => {
      draggableItem.classList.remove('is-idle');
      draggableItem.classList.add('is-draggable');
    }

    const updateIdleItemsStateAndPosition = () => {
      const draggableItemRect = draggableItem.getBoundingClientRect();
      const draggableItemY = draggableItemRect.top + draggableItemRect.height / 2;

      getIdleItems().forEach(item => {
        const itemRect = item.getBoundingClientRect();
        const itemY = itemRect.top + itemRect.height / 2;
        if (isItemAbove(item)) {
          if (draggableItemY <= itemY) {
            item.dataset.isToggled = '';
          } else {
            delete item.dataset.isToggled;
          }
        } else {
          if (draggableItemY >= itemY) {
            item.dataset.isToggled = '';
          } else {
            delete item.dataset.isToggled;
          }
        }
      });

      getIdleItems().forEach(item => {
        if (isItemToggled(item)) {
          const direction = isItemAbove(item) ? 1 : -1;
          item.style.transform = `translateY(${direction * (draggableItemRect.height + itemsGap)}px)`;
        } else {
          item.style.transform = '';
        }
      });
    }

    const cleanup = () => {
      itemsGap = 0;
      items = [];
      unsetItemState();
      enablePageScroll();

      document.removeEventListener('mousemove', drag);
      document.removeEventListener('touchmove', drag);
    }

    const unsetDraggableItem = () => {
      draggableItem.style = null;
      draggableItem.classList.remove('is-draggable');
      draggableItem.classList.add('is-idle');
      draggableItem = null;
    }

    const unsetItemState = () => {
      getIdleItems().forEach((item, i) => {
        delete item.dataset.isAbove;
        delete item.dataset.isToggled;
        item.style.transform = '';
      });
    }

    const enablePageScroll = () => {
      document.body.style.overflow = '';
      document.body.style.touchAction = '';
      document.body.style.userSelect = '';
    }

    const applyNewItemsOrder = (e) => {
      const reorderedItems = [];

      getAllItems().forEach((item, index) => {
        if (item === draggableItem) {
          return;
        }
        if (!isItemToggled(item)) {
          reorderedItems[index] = item;
          return;
        }
        const newIndex = isItemAbove(item) ? index + 1 : index - 1;
        reorderedItems[newIndex] = item;
      });

      for (let index = 0; index < getAllItems().length; index++) {
        const item = reorderedItems[index];
        if (typeof item === 'undefined') {
          reorderedItems[index] = draggableItem;
        }
      }

      reorderedItems.forEach(item => {
        listContainer.appendChild(item);
      });

      draggableItem.style.transform = '';

      requestAnimationFrame(() => {
        const rect = draggableItem.getBoundingClientRect();
        const yDiff = prevRect.y - rect.y;
        const currentPositionX = e.clientX || e.changedTouches?.[0]?.clientX;
        const currentPositionY = e.clientY || e.changedTouches?.[0]?.clientY;

        const pointerOffsetX = currentPositionX - pointerStartX;
        const pointerOffsetY = currentPositionY - pointerStartY;

        draggableItem.style.transform = `translate(${pointerOffsetX}px, ${pointerOffsetY + yDiff}px)`;
        requestAnimationFrame(() => {
          unsetDraggableItem();
        });
      });
    }

    const dragStart = (e) => {
      if (e.target.classList.contains('nf-js-drag-handle')) {
        draggableItem = e.target.closest('.js-item');
      }

      if (!draggableItem) return;

      pointerStartX = e.clientX || e.touches?.[0]?.clientX;
      pointerStartY = e.clientY || e.touches?.[0]?.clientY;

      setItemsGap();
      disablePageScroll();
      initDraggableItem();
      initItemsState();
      prevRect = draggableItem.getBoundingClientRect();

      document.addEventListener('mousemove', drag);
      document.addEventListener('touchmove', drag, { passive: false });
    }

    const drag = (e) => {
      if (!draggableItem) return;

      e.preventDefault();

      const clientX = e.clientX || e.touches[0].clientX;
      const clientY = e.clientY || e.touches[0].clientY;

      const pointerOffsetX = clientX - pointerStartX;
      const pointerOffsetY = clientY - pointerStartY;

      draggableItem.style.transform = `translate(${pointerOffsetX}px, ${pointerOffsetY}px)`;

      updateIdleItemsStateAndPosition();
    }

    const dragEnd = (e) => {
      if (!draggableItem) return;
      applyNewItemsOrder(e);
      updateFunction();
      cleanup();
    }

    listContainer.addEventListener('mousedown', dragStart);
    listContainer.addEventListener('touchstart', dragStart);
    document.addEventListener('mouseup', dragEnd);
    document.addEventListener('touchend', dragEnd);
  };

  const updateProductOrderList = async () => {
    const productListContainer = document.getElementById('product__list');
    const productIds = Array.from(productListContainer.querySelectorAll('.wishlist_row'))
      .map(row => row.getAttribute('data-product-id'));
    await window.refreshTokenIfNeeded();
    const currentAccountData = JSON.parse(localStorage.getItem('currentAccount'));
    const { authToken } = window.customerOrdersApp;
    const url = `${window.customerOrdersApp.urlProxy}api/v1/customer/product-list?email=${encodeURIComponent(currentAccountData?.email ?? `{{ customer.email }}`)}`;
    const token = 'Bearer ' + authToken;
    const productIdPayload = {
      products: productIds,
    }
    const requestOptions = {
      method: 'PUT',
      headers: {
        'Authorization': token,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(productIdPayload),
    };

    fetch(url, requestOptions)
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        return response.text();
      })
      .then(result => {
        var orderListNotif = document.getElementById('nf-sorting-modal-notif');
        orderListNotif.style.display = "block";
      setTimeout(function () {
        orderListNotif.style.display = "none";
      }, 1000);
        
      })
      .catch(error => console.error('Failed to update product order:', error));
  }

  document.addEventListener('DOMContentLoaded', () => {
    initTabs();
    initDialog();
    productSearch();
    toggleClearButton();
    clearSearch();

    const wishlistProductList = document.querySelector('.js-list-wishlist');
    const orderListProductList = document.querySelector('.js-list');

    if (orderListProductList) {
      setupDragAndDropOrderList(orderListProductList);
    }

    const saveButton = document.getElementById('saveOrderBtn');
    const cancelButton = document.getElementById('cancelOrderBtn');
    let initialProductOrder = [];
    function saveInitialProductOrder() {
      const productListContainer = document.getElementById('product__list') || null;
      if (productListContainer) {
        initialProductOrder = Array.from(productListContainer.querySelectorAll('.wishlist_row'))
          .map(row => row.getAttribute('data-product-id'));
      }
    }
    saveInitialProductOrder();
  });

  const updateSubtotal = (spinners, displayElement) => {
  let subtotal = 0;
  let totalQuantity = 0;
  let uniqueProducts = 0;

  const subtotalText = document.querySelector('.nf__totals--price-text') || '';
  const linesText = document.querySelector('.nf__totals--lines-text') || ''; 

  spinners.forEach(spinner => {
      const quantityInput = spinner.querySelector(".orderlist-quantity__input");
      const priceElement = spinner.closest(".wishlist_row").querySelector(".price");

      const priceText = priceElement ? priceElement.textContent.replace("€", "").replace(",", ".") : "0";
      const price = parseFloat(priceText) || 0;
      const quantity = parseInt(spinner.value) || 0;

      subtotal += price * quantity;
      totalQuantity += quantity;

      if (quantity > 0) {
          uniqueProducts += 1; 
      }
  });

  subtotalText.innerHTML = `${subtotal.toFixed(2).replace(".", ",")}`;
  linesText.innerHTML = `(${uniqueProducts} ${window.String.line_item}, ${totalQuantity} ${window.String.product_items} )`; 
};

document.addEventListener('DOMContentLoaded', function () {
  const quantitySpinners = document.querySelectorAll('.orderlist-quantity-spinner');
      quantitySpinnerElem(quantitySpinners, ".orderlist-minus__button", ".orderlist-plus__button", ".orderlist-quantity__input", ".orderlist-re-order-btn", ".sub-display-added-quantity");
      updateSubtotal(quantitySpinners);
  });
  document.addEventListener('productListUpdated', () => {
    const wishlistProductList = document.querySelector('.js-list-wishlist');
    const orderListProductList = document.querySelector('.js-list');
    if (wishlistProductList) {
      setupDragAndDropWishlist(wishlistProductList);
    }
    if (orderListProductList) {
      setupDragAndDropOrderList(orderListProductList);
    }

    const orderlist_re_order_btn = document.querySelector('.orderlist-re-order-btn');
    const quantitySpinners = document.querySelectorAll('.orderlist-quantity-spinner');
    let wishListCartData = [];
    let newWishlistData = [];
    quantitySpinnerElem(quantitySpinners, ".orderlist-minus__button", ".orderlist-plus__button", ".orderlist-quantity__input", ".orderlist-re-order-btn", ".sub-display-added-quantity");
    if (orderlist_re_order_btn) {
      orderlist_re_order_btn.addEventListener('click', function (event) {
        this.classList.add('loading');
        this.innerHTML = `<div class="loading-overlay__spinner"><svg aria-hidden="true" focusable="false" role="presentation" class="spinner" viewBox="0 0 66 66" xmlns="http://www.w3.org/2000/svg"><circle class="path" fill="none" stroke-width="6" cx="33" cy="33" r="30"></circle></svg></div>`;
        quantitySpinners.forEach((quantitySpinner) => {
          const quantityInput = quantitySpinner.querySelector('.orderlist-quantity__input');

          let item = quantitySpinner.parentNode.parentNode.dataset.variant;
          let quantityValue = quantityInput.value;
          wishListCartData.push({
            id: item,
            quantity: quantityValue,
          });
        });
        const reducedWishlistCartData = wishListCartData;
        let result = reducedWishlistCartData.reduce((acc, curr) => {
          let item = acc.find((item) => item.id === curr.id);

          if (item) {
            item.quantity = curr.quantity;
          } else {
            acc.push(curr);
            newWishlistData.push(curr);
          }
          return acc;
        }, []);
        newWishlistData = newWishlistData.filter((item) => item.quantity > 0);
        var data = {
          items: newWishlistData,
        };
        addToCart(data, this);
      });
    }

      function isElementVisible(element) {
        return element && element.offsetParent !== null;
      }

      document.addEventListener("keydown", function (event) {
        const searchInput = document.querySelector("#productSearch");
        const quantityInputs = Array.from(document.querySelectorAll(".orderlist-quantity__input")).filter(isElementVisible);
        function focusAndSetCursorAtEnd(input) {
          if (input.type === 'number') {
            const value = input.value;
            input.type = 'text';
            input.value = '';
            input.value = value;
            input.type = 'number'; 
          }
          input.focus();
        }

        if (event.target === searchInput && event.key === "Tab") {
          event.preventDefault();
          if (quantityInputs.length > 0) {
            focusAndSetCursorAtEnd(quantityInputs[0]);
          }
        }

        if (event.target.classList.contains("orderlist-quantity__input") && event.key === "Tab") {
          event.preventDefault();
          const currentInput = event.target;
          const currentIndex = quantityInputs.indexOf(currentInput);

          if (event.shiftKey) {
            if (currentIndex > 0) {
              focusAndSetCursorAtEnd(quantityInputs[currentIndex - 1]);
            } else {
              searchInput.focus(); 
            }
          } else {
            if (currentIndex < quantityInputs.length - 1) {
              focusAndSetCursorAtEnd(quantityInputs[currentIndex + 1]);
            } else {
              const submitButton = document.querySelector("button[type='submit']");
              if (submitButton) {
                submitButton.focus(); 
              }
            }
          }
        }
        
        if (event.key === "Escape") {
          event.preventDefault();
          searchInput.focus();
          clearSearch();
        }
        
      });
  });

  function handleReOrderSelected(event) {
      const accountDrawer = document.querySelector('#nf_drawer');
        
        if (accountDrawer && accountDrawer.hasAttribute('open')) {
          if (event.key === "Enter") {
            const reOrderButton = document.querySelector(".orderlist-re-order-btn");

            if (reOrderButton && !reOrderButton.classList.contains('disabled')) {
              reOrderButton.click();
              clearSearch();
            }
          }
        }
    }
  document.addEventListener('keydown', handleReOrderSelected);
</script>


<div id="nf_drawer">
  <div class="nf-drawer nf-dialog">
    <div class="nf-drawer-content">
      {% unless customer %}
      <div class="close-wrapper">
        <span class="nf-close-dialog" onclick="window.dialog.close();">
          <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 448 512">
            <path
              d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
          </svg>
        </span>
      </div>
      {% endunless %}
      {% if customer %}
      <div class="nf-tab--container">
        <div class="nf-account-tab">
          <div class="nf-dropdown active">
            <span>
              <svg xmlns="http://www.w3.org/2000/svg" width="24px" height="24px" viewBox="0 0 20 20"
                fill="currentColor">
                {% render 'icon-account' %}
              </svg>
            </span>
            <span>
              {{- 'customer.account_drawer.account_tab' | t -}}
            </span>
            <span class="nf-dropdown-caret"></span>
            <div class="nf-dropdown-content">
              <ul class="nf-dropdown-list">
                
                <li>
                  <div class="profile__wrapper">
                      <div id="selectedAccountDisplay">

                        
                        {% if customer.current_company.name %}
                          <div>
                            <span class="company_name">{{ customer.current_company.name }}</span>
                          </div>
                        {% endif %}

                        {% if customer.current_company.name and customer.current_location.name %}
                          {% if customer.first_name %}
                            <a href="https://shopify.com/{{ shop.id }}/account/profile class="customer_name_link">
                              <span class="customer_name"> {{ customer.first_name }} {{ customer.last_name }}</span>
                            </a>
                          {% else %}
                            <a href="https://shopify.com/{{ shop.id }}/account/profile" class="customer_email_link">
                              {{ customer.email }}
                            </a>
                          {% endif %}
                        {% else %}
                          {% if customer.first_name %}
                            <span class="customer_name"> {{ customer.first_name }} {{ customer.last_name }}</span>
                          {% else %}
                            {{ customer.email }}
                          {% endif %}
                        {% endif %}

  
                      </div>
                      <div class="revert_button_wrapper">
                        <button id="revertBtn" title="Revert to Previous Account">
                          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 384 512"><path d="M376.6 84.5c11.3-13.6 9.5-33.8-4.1-45.1s-33.8-9.5-45.1 4.1L192 206 56.6 43.5C45.3 29.9 25.1 28.1 11.5 39.4S-3.9 70.9 7.4 84.5L150.3 256 7.4 427.5c-11.3 13.6-9.5 33.8 4.1 45.1s33.8 9.5 45.1-4.1L192 306 327.4 468.5c11.3 13.6 31.5 15.4 45.1 4.1s15.4-31.5 4.1-45.1L233.7 256 376.6 84.5z" /></svg>
                        </button>
                      </div>
                    </div>
                  {% assign location_count = customer.company_available_locations | size %}
                  {% if location_count > 0 %}
                <li class="location">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M10.4949 14.501L10.4941 21.999H7.49913L7.49989 14.501H10.4949ZM17.2546 13.001H13.7532C13.339 13.001 13.0032 13.3368 13.0032 13.751V17.253C13.0032 17.6672 13.339 18.003 13.7532 18.003H17.2546C17.6688 18.003 18.0046 17.6672 18.0046 17.253V13.751C18.0046 13.3368 17.6688 13.001 17.2546 13.001ZM16.5039 14.501V16.503H14.5029V14.501H16.5039ZM8.16589 7.002H3.50089L3.501 8.16674C3.501 9.34763 4.37852 10.3236 5.51705 10.478L5.67387 10.4939L5.83357 10.4993C7.06813 10.4993 8.07869 9.54019 8.16076 8.32644L8.16614 8.16674L8.16589 7.002ZM14.3309 7.002H9.66589L9.66614 8.16674C9.66614 9.34763 10.5437 10.3236 11.6822 10.478L11.839 10.4939L11.9987 10.4993C13.2333 10.4993 14.2438 9.54019 14.3259 8.32644L14.3313 8.16674L14.3309 7.002ZM20.4979 7.002H15.8329L15.8336 8.16674C15.8336 9.34763 16.7112 10.3236 17.8497 10.478L18.0065 10.4939L18.1662 10.4993C19.4008 10.4993 20.4113 9.54019 20.4934 8.32644L20.4988 8.16674L20.4979 7.002ZM9.06051 3.5H6.32589L4.46889 5.502H8.44551L9.06051 3.5ZM13.3685 3.5H10.6305L10.0145 5.502H13.9845L13.3685 3.5ZM17.6729 3.5H14.9385L15.5535 5.502H19.5299L17.6729 3.5ZM2.20117 5.74193L5.45006 2.23991C5.56833 2.11243 5.7264 2.03081 5.89656 2.00715L5.99989 2H17.9999C18.1738 2 18.3411 2.06037 18.4742 2.16902L18.5497 2.23991L21.822 5.76824L21.8527 5.80714C21.9544 5.94281 22.0003 6.09665 22.0003 6.24775L21.9988 8.16674C21.9988 9.16092 21.6202 10.0667 20.9994 10.7478L20.9986 21.25C20.9986 21.6297 20.7165 21.9435 20.3504 21.9932L20.2486 22L11.9951 21.999L11.9958 13.751C11.9958 13.3368 11.6601 13.001 11.2458 13.001H6.74989C6.33568 13.001 5.99989 13.3368 5.99989 13.751L5.99913 21.999L3.75113 22C3.37144 22 3.05764 21.7178 3.00798 21.3518L3.00113 21.25L3.00035 10.7478C2.42084 10.112 2.05244 9.28045 2.00598 8.36396L2.001 8.16674L2.0008 6.29097C1.99273 6.15366 2.02238 6.01238 2.09673 5.88313L2.14651 5.807L2.20117 5.74193Z"
                      fill="#212121" />
                  </svg>
                  {% if location_count > 1 %}
                  <a id="selectedAccountLocationName" href="https://shopify.com/{{ shop.id }}/account/locations">
                    <span class="location_name">
                      {{ customer.current_location.name }}
                    </span>
                    <div class="locations_link">
                      {{ 'customer.account_drawer.edit' | t }}
                    </div>
                  </a>
                  {% else %}
                  <span id="selectedAccountLocationName">
                    {{ customer.current_location.name }}
                  </span>
                  {% endif %}
                </li>
                <li class="logout_link">
                  <a class="link" href="/account/orders">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path
                        d="M14 2.26953V6.40007C14 6.96012 14 7.24015 14.109 7.45406C14.2049 7.64222 14.3578 7.7952 14.546 7.89108C14.7599 8.00007 15.0399 8.00007 15.6 8.00007H19.7305M14 17H8M16 13H8M20 9.98822V17.2C20 18.8802 20 19.7202 19.673 20.362C19.3854 20.9265 18.9265 21.3854 18.362 21.673C17.7202 22 16.8802 22 15.2 22H8.8C7.11984 22 6.27976 22 5.63803 21.673C5.07354 21.3854 4.6146 20.9265 4.32698 20.362C4 19.7202 4 18.8802 4 17.2V6.8C4 5.11984 4 4.27976 4.32698 3.63803C4.6146 3.07354 5.07354 2.6146 5.63803 2.32698C6.27976 2 7.11984 2 8.8 2H12.0118C12.7455 2 13.1124 2 13.4577 2.08289C13.7638 2.15638 14.0564 2.27759 14.3249 2.44208C14.6276 2.6276 14.887 2.88703 15.4059 3.40589L18.5941 6.59411C19.113 7.11297 19.3724 7.3724 19.5579 7.67515C19.7224 7.94356 19.8436 8.2362 19.9171 8.5423C20 8.88757 20 9.25445 20 9.98822Z"
                        stroke="#000000" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                    <span class="order_link">
                      Bekijk bestellingen van alle vestigingen
                    </span>
                  </a>
                </li>
                {% endif %}
                </li>
                <li class="logout_link">
                  <a class="link" href="{{ routes.account_logout_url }}">
                    <span>
                      <svg xmlns="http://www.w3.org/2000/svg" height="16" width="16" viewBox="0 0 512 512">
                        
                        <path
                          d="M502.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224 192 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l210.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128zM160 96c17.7 0 32-14.3 32-32s-14.3-32-32-32L96 32C43 32 0 75 0 128L0 384c0 53 43 96 96 96l64 0c17.7 0 32-14.3 32-32s-14.3-32-32-32l-64 0c-17.7 0-32-14.3-32-32l0-256c0-17.7 14.3-32 32-32l64 0z" />
                      </svg>
                    </span>
                    <span>
                      {{ 'customer.account_drawer.logout' | t }}
                    </span>
                  </a>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <div>
          <span class="nf-cart-drawer-icon">
            <span>
              {{ 'customer.account_drawer.cart' | t }}
            </span>
          </span>
        </div>
        <div class="close-wrapper">
          <span class="nf-close-dialog" onclick="window.dialog.close();">
            <svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="0 0 448 512">
              <path
                d="M438.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-160-160c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L338.8 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l306.7 0L233.4 393.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l160-160z" />
            </svg>
          </span>
        </div>
      </div>
      <div class="nf-tab-container">
        <button class="tab" data-target="orders">
          <span>{{ 'customer.account_drawer.orders_tab' | t }}</span>
        </button>
        <button class="tab active" data-target="order-lists">
          <span>{{ 'customer.account_drawer.order_list_title' | t }}</span>
        </button>
      </div>
      <div id="orders" class="tab-content">
        <div class="nf-section nf-my-orders__wrapper">
          {% if customer.metafields.custom.phone_accountmanager != blank %}
            {% assign phone_accountmanager = customer.metafields.custom.phone_accountmanager %}
            <p>{{ 'customer.account_drawer.accountmanager_phone_message' | t }} <strong>{{ phone_accountmanager }}</strong></p>
          {% endif %}        
          <nf-customer-orders />
        </div>
      </div>
      <div id="order-lists" class="tab-content active">
        {% if customer.metafields.custom.phone_accountmanager != blank %}
          {% assign phone_accountmanager = customer.metafields.custom.phone_accountmanager %}
          <p>{{ 'customer.account_drawer.accountmanager_phone_message' | t }} <strong>{{ phone_accountmanager }}</strong></p>
        {% endif %}       
        <div class="search-container">
          <div class="field">
            <input class="search__input field__input" oninput="toggleClearButton()" id="productSearch" type="search"
              placeholder="Zoeken" role="combobox">
            {% comment %} <label class="field__label" for="productSearch">Zoeken</label> {% endcomment %}
            {% comment %} <button class="search__button field__button" aria-label="Zoeken">
              <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" class="icon icon-search">
                <path
                  d="M22.938 13.382c-0.036 5.247-4.318 9.472-9.565 9.437s-9.472-4.318-9.436-9.565c0.035-5.223 4.28-9.438 9.503-9.437 5.263 0.023 9.513 4.302 9.501 9.565h-0.003zM26.881 13.382c-0.032-7.423-6.075-13.414-13.498-13.382s-13.414 6.075-13.382 13.497c0.031 7.4 6.039 13.382 13.44 13.382 7.435-0.025 13.447-6.062 13.44-13.498z">
                </path>
                <path d="M29.216 31.882l-8.499-8.451 2.784-2.787 8.499 8.451-2.784 2.787z"></path>
              </svg>
            </button> {% endcomment %}
            {% comment %} <button id="clearButton" onclick="clearSearch()" style="display: none;">X</button> {% endcomment %}
          </div>
        </div>
        <div id="nf-tab_view-order">
          <div class="nf-section nf-my-orders__wrapper">
            <div class="sales-customer__information">
              {% if customer.tags contains 'COA_Role_Admin' and customer.email contains 'takeaware.nl' or customer.email contains 'newfive.nl' or customer.email contains 'newfive.dev' or customer.email contains 'takeaware.com' or customer.email contains 'dejongdisposables.nl' %}
              <div class="switch_account_button switchAccount__btn" title="Switch Account">
                <svg version="1.1" viewBox="0 0 2048 2048" xmlns="http://www.w3.org/2000/svg">
                <path transform="translate(1584,538)" d="m0 0h21l45 1 27 2 26 4 24 6 24 8 29 13 20 11 21 14 17 13 10 9 8 7 16 16 9 11 11 14 9 13 10 16 13 25 11 27 6 19 6 25 4 28 1 12 1 120-1 3h-727l-1-2v-117l3-29 5-26 7-25 7-20 11-24 12-22 12-18 9-12 11-13 9-11 5-5h2l2-4 8-7 15-13 19-14 16-10 18-10 16-8 26-10 24-7 25-5 23-3 16-1z"/>
                <path transform="translate(402,1538)" d="m0 0h117l28 2 26 4 21 5 30 10 25 11 22 12 21 14 13 10 10 8 13 12 16 16 9 11 13 17 10 15 10 17 12 24 9 24 7 23 6 29 3 25 1 38v87l-1 2-724 1-3-1-1-2v-110l2-27 5-30 7-26 7-21 9-20 8-16 13-22 10-14 10-13 8-10h2l2-4 20-20 8-7 14-11 17-12 13-8 18-10 19-9 18-7 24-7 23-5 19-3z"/>
                <path transform="translate(447,1120)" d="m0 0h27l22 3 21 6 20 8 15 8 12 8 13 10 13 12 10 11 12 17 8 13 8 18 7 21 4 19 1 9v36l-4 24-6 19-7 17-9 17-12 17-9 11h-2l-2 4-7 7-14 11-15 10-19 10-22 8-21 5-25 3h-13l-19-2-17-3-16-5-16-6-19-10-17-12-11-10-8-7-10-11-12-16-9-16-8-17-6-18-5-25-1-8v-31l4-25 7-23 8-18 8-14 12-17 12-13 12-12 17-13 19-11 18-8 20-6 20-4z"/>
                <path transform="translate(1572,121)" d="m0 0h32l25 4 20 6 23 10 18 11 12 9 13 12 11 11 10 13 8 13 10 19 8 22 4 17 2 14 1 13v11l-1 17-5 26-7 21-8 17-13 21-14 17-11 11-14 11-15 10-19 10-22 8-21 5-14 2h-36l-23-4-20-6-20-9-16-9-16-12-10-9-13-13-11-14-10-16-8-16-7-18-6-26-2-16v-24l3-22 4-16 6-18 10-21 11-17 11-14 19-19 15-11 18-11 20-9 23-7z"/>
                <path transform="translate(1660,1160)" d="m0 0h12l9 3 6 4 8 9 3 7 1 5v385l-3 21-6 20-8 16-10 16-12 13-9 9-14 10-19 10-21 7-17 3-12 1h-313l7 8 55 55 6 10 2 8v7l-3 10-6 9-8 6-7 3-13 1-10-3-6-4-12-11-107-107-7-10-3-7-1-9 3-12 8-11 118-118 11-6 4-1h12l9 3 9 7 6 9 2 5 1 11-2 8-4 8-11 12-53 53h315l12-2 13-5 10-6 10-9 7-8 6-12 3-9 2-12v-264l1-119 4-11 6-8 9-6z"/>
                <path transform="translate(745,234)" d="m0 0 10 1 12 6 123 123 6 12v15l-5 11-7 8-116 116-8 5-7 2h-14l-9-4-8-7-5-8-3-9v-8l3-10 6-9 63-63h-310l-15 3-16 8-7 6h-2v2h-2v2h-2l-2 4-7 11-6 14-2 13-1 382-3 10-6 8-7 6-7 3-6 1h-8l-10-3-6-4-8-9-4-11v-389l3-19 6-19 8-16 7-12 11-13 14-14 14-10 10-6 20-8 15-4 16-2 308-1-21-21-5-6-6-5-7-8-7-7-2-1v-2h-2v-2l-4-2-8-10-4-8-1-4v-9l3-10 7-10 9-6 5-2z"/>
                </svg>
              </div>
              {% endif %}
              <div id="customerProfileName" class="current_customer--name"></div>
              <div class="display-quantity-wrapper nf-hidden">
                <span>Aantal items </span><span class="display-added-quantity orderlist-display-added-quantity"></span>
              </div>
            </div>
            <div class="nf-section-heading"></div>
            
            
          
            <div id="product__list"></div>
            
          </div>
        </div>
      </div>
      {% else %}
        {% render 'nf-account-drawer-login' %}
      {% endif %}
    
    </div>
    
    
    <dialog id="accountModal">
    <form method="dialog">
      <p>{{ 'customer.account_drawer.customer_list_search' | t}}</p>
      </p>
      <div class="customer-search-container">
        <div class="customerSearchInputWrapper">
          <div>
            <input
          type="search"
          id="customerSearchInput"
          autofill="off"
          autocomplete="off"
          autosuggest="off"
          placeholder="Search customer">
          </div>
          <div class="customerListLoader nf-loader-overlay nf-hidden">
            <div class="nf-spinner"></div>
          </div>
        </div>
        <ul id="customerSearchDropdown" class="account-dropdown-content"></ul>
        <div class="companyListLoader nf-loader-overlay nf-hidden">
            <div class="nf-spinner"></div>
          </div>
        <div id="companyListWrapper" class="nf-hidden"></div>
        <div id="selectedCompanyDisplay" class="nf-hidden"></div>
      </div>
      <menu>
        <button id="cancelBtn" value="cancel">{{ 'customer.account_drawer.notif_cancel' | t }}</button>
        <button id="confirmBtn" class="disabled">{{ 'customer.account_drawer.notif_confirm' | t }}</button>
      </menu>
    </form>
  </dialog>
  </div>
</div>

<div id="create_draft_snackbar">Draft Order Created</div>
{% render 'nf-delete-notification' %}
{% render 'nf-wishlist-notification' %}
{% render 'nf-add-to-cart-notification' %}
{% render 'nf-sort-notification' %}
{% render 'nf-error-add-to-cart-notification' %}
